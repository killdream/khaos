- Functional Programming
  # The return values of `delay' are dependant on the
  # platform, as they're what gets returned from `setTimeout'.
  Module fun
    compose :: Fun... -> Fun
    partial :: Fun, Any... -> Fun
    delay   :: Fun, seconds:Number -> Unspecified
    defer   :: Fun -> Undefined
    not     :: Fun -> Fun -> Bool


- Type checking
  Module type
    is_p        :: Any, Object | Fun -> Bool
    name        :: Any -> String
    string_p    :: Any -> Bool
    number_p    :: Any -> Bool
    date_p      :: Any -> Bool
    regexp_p    :: Any -> Bool
    fun_p       :: Any -> Bool
    bool_p      :: Any -> Bool
    object_p    :: Any -> Bool
    primitive_p :: Any -> Bool
    undefined_p :: Any -> Bool
    

- Object orientation / composition
  extend :: Object, (Object | DataObject)... -> Object
  clone  :: proto:Object, (Object | DataObject)... -> Object

  Object base
    make  :: Any... -> Object
    clone :: Any... -> Object


- Collection
  Module map
    # Traversable
    each      :: {k -> e}, (e, k, {k -> e} -> Ignored) -> Undefined

    # Manipulation
    at        :: {k -> e}, k -> e
    put       :: {k -> e}, k, e -> {k -> e}
    remove    :: {k -> e}, k -> {k -> e}
    clear     :: {k -> e} -> {k -> e}

    # Inspection
    size      :: {k -> e} -> Number
    empty_p   :: {k -> e} -> Bool
    has_key_p :: {k -> e}, k -> Bool

    # Decomposition
    keys      :: {k -> e} -> [k]
    values    :: {k -> e} -> [e]
    items     :: {k -> e} -> [(k, e)]

    # Folding
    reduce    :: {k -> e}, Any, (Any, e, k -> Any) -> Any
    reduce    :: {k -> e}, (Any, e, k -> Any) -> Any
    every     :: {k -> e}, (e, k, {k -> e} -> Bool) -> Bool
    some      :: {k -> e}, (e, k, {k -> e} -> Bool) -> Bool
    filter    :: {k -> e}, (e, k, {k -> e} -> Bool) -> {k -> e}
    map       :: {k -> e}, (e, k, {k -> e} -> e) -> {k -> e}